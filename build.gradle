buildscript {
	dependencies {
		classpath 'org.kohsuke:github-api:1.315'
	}
}

plugins {
	id 'maven-publish'
	alias libs.plugins.quilt.loom
	alias libs.plugins.loom.vineflower
	alias libs.plugins.modrinth.minotaur
	alias libs.plugins.grgit
}

archivesBaseName = project.archives_base_name
version = "${project.version}${getVersionMetadata()}${project.prerelease=="true"?"-beta":""}+${libs.versions.minecraft.get()}"
group = project.maven_group

repositories {
	// Add repositories to retrieve artifacts from in here.
	// You should only use this when depending on other mods because
	// Loom adds the essential maven repositories to download Minecraft and libraries from automatically.
	// See https://docs.gradle.org/current/userguide/declaring_repositories.html
	// for more information about repositories.
	maven {url = "https://jitpack.io"}
	maven {
		name 'Gegy'
		url 'https://maven.gegy.dev'
	}
}

// All the dependencies are declared at gradle/libs.version.toml and referenced with "libs.<id>"
// See https://docs.gradle.org/current/userguide/platforms.html for information on how version catalogs work.
dependencies {
	minecraft libs.minecraft
	mappings variantOf(libs.quilt.mappings) { classifier 'intermediary-v2' }
	// Replace the above line with the block below if you want to use Mojang mappings as your primary mappings, falling back on QM for parameters and Javadocs
	/*
	mappings loom.layered {
		mappings "org.quiltmc:quilt-mappings:${libs.versions.quilt.mappings.get()}:intermediary-v2"
		officialMojangMappings()
	}
	*/
	modImplementation libs.qsl
	modImplementation libs.quilt.loader

	modApi(libs.statement){ exclude group: "net.fabricmc.fabric-api" }
	include libs.statement

	// QSL is not a complete API; You will need Quilted Fabric API to fill in the gaps.
	// Quilted Fabric API will automatically pull in the correct QSL version.
	modImplementation libs.quilted.fabric.api
	// modImplementation libs.bundles.quilted.fabric.api // If you wish to use Fabric API's deprecated modules, you can replace the above line with this one
}

processResources {
	inputs.property 'version', version

	filesMatching('quilt.mod.json') {
		expand "version": version
	}
}

tasks.withType(JavaCompile).configureEach {
	it.options.encoding = 'UTF-8'
	// Minecraft 1.18 (1.18-pre2) upwards uses Java 17.
	it.options.release = 17
}

java {
	// Still required by IDEs such as Eclipse and Visual Studio Code
	sourceCompatibility = JavaVersion.VERSION_17
	targetCompatibility = JavaVersion.VERSION_17

	// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task if it is present.
	// If you remove this line, sources will not be generated.
	withSourcesJar()

	// If this mod is going to be a library, then it should also generate Javadocs in order to aid with development.
	// Uncomment this line to generate them.
	// withJavadocJar()
}

jar {
	filesMatching('LICENSE') {
		rename '^(LICENSE.*?)(\\..*)?$', "\$1_${archivesBaseName}\$2"
	}
}

// Configure the maven publication
publishing {
	publications {
		mavenJava(MavenPublication) {
			from components.java
		}
	}

	// See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
	repositories {
		// Add repositories to publish to here.
		// Notice: This block does NOT have the same function as the block in the top level.
		// The repositories here will be used for publishing your artifact, not for
		// retrieving dependencies.
	}
}
import org.kohsuke.github.GHReleaseBuilder
import org.kohsuke.github.GitHub

tasks.register('github') {
	dependsOn renameJar
	onlyIf {
		ENV.GITHUB_TOKEN
	}

	doLast {
		def github = GitHub.connectUsingOAuth(ENV.GITHUB_TOKEN as String)
		def repository = github.getRepository(ENV.GITHUB_REPOSITORY)

		def releaseBuilder = new GHReleaseBuilder(repository, version as String)
		releaseBuilder.name("Maddie's Building Tweaks ${project.version}${project.prerelease=="true"?" Beta":""} For Quilt ${libs.versions.minecraft.get()}")
		releaseBuilder.body(ENV.CHANGELOG ?: "No changelog provided")
		releaseBuilder.commitish("${grgit.head().hashCode()}")
		releaseBuilder.prerelease(project.prerelease == 'true')

		def ghRelease = releaseBuilder.create()
		ghRelease.uploadAsset(renameJar.archiveFile.get().getAsFile(), 'application/java-archive');
	}
}


modrinth{
	token = System.getenv("MODRINTH_TOKEN")
	projectId = "hHUFyhEX"
	versionName = "Maddie's Building Tweaks ${project.version}${project.prerelease=="true"?" Beta":""} For Quilt ${libs.versions.minecraft.get()}"
	versionType = "release"
	uploadFile = jar
	gameVersions = ["${libs.versions.minecraft.get()}"]
	loaders = ["quilt"]
	dependencies { // A special DSL for creating dependencies
		// scope.type
		// The scope can be `required`, `optional`, `incompatible`, or `embedded`
		// The type can either be `project` or `version`
		required.project "qsl" // Creates a new required dependency on
		embedded.version "statement", "4.2.4+1.14.4-1.19.1" // Creates a new optional dependency on this specific version of Sodium
	}
}

def getVersionMetadata() {
	// CI builds only
	if (project.hasProperty("build.release")) {
		return "" // no tag whatsoever
	}

	if (grgit != null) {
		def head = grgit.head()
		def id = head.abbreviatedId

		// Flag the build if the build tree is not clean
		if (!grgit.status().clean) {
			id += "-dirty"
		}

		return "+git.${id}"
	}

	// No tracking information could be found about the build
	return "+unknown"
}
